import numpy as np
import Side as Side
import CubeManipulator as CubeManipulator

LENGTH_OF_CUBE = 3

front = Side.Side("Front", "Red", False, LENGTH_OF_CUBE)
top = Side.Side("Top", "Blue", False, LENGTH_OF_CUBE)
right = Side.Side("Right", "White", True, LENGTH_OF_CUBE)
left = Side.Side("Left", "Green", True, LENGTH_OF_CUBE)
bottom = Side.Side("Bottom", "Yellow", False, LENGTH_OF_CUBE)
back = Side.Side("Back", "Orange", False, LENGTH_OF_CUBE)

front.setNeighbours(top_neighbour=top, left_neighbour=left, right_neighbour=right, bottom_neighbour=bottom)
top.setNeighbours(top_neighbour=back, left_neighbour=left, right_neighbour=right, bottom_neighbour=front)
back.setNeighbours(top_neighbour=bottom, left_neighbour=left, right_neighbour=right, bottom_neighbour=top)
bottom.setNeighbours(top_neighbour=front, left_neighbour=left, right_neighbour=right, bottom_neighbour=back)
left.setNeighbours(top_neighbour=top, left_neighbour=back, right_neighbour=front, bottom_neighbour=bottom)
right.setNeighbours(top_neighbour=top, left_neighbour=front, right_neighbour=back, bottom_neighbour=bottom)

all_sides = [front, top, right, left, bottom, back]

operations = CubeManipulator.CubeManipulator(all_sides, LENGTH_OF_CUBE)
operations.printCubeState()
# front.printSide()
# front.getRowOrColumnCopyForRotation("Top")
# front.replaceRowOrColumnCopyForRotation("Top", [1, 2, 3])
# front.getRowOrColumnCopyForRotation("Right")
# front.printSide()
# front.replaceRowOrColumnCopyForRotation("Left", ["a", "b", "c"])
# front.printSide()
# front.rotateFromFront(True)
# front.printSide()
# front.rotateFromFront(False)
# front.printSide()

operations.rotateSide(right)
operations.printCubeState()
operations.rotateSide(right, False)
operations.printCubeState()

